# SINIC理論に基づいた「エモコネクト」要件定義書

## 1. 概要

### 1.1 アプリ名
「エモコネクト」

### 1.2 目的
- ユーザーが感情を表現し、共感し合える場を提供する
- 感情を基軸とした新しいコミュニケーションを創造する
- ユーザーのメンタルヘルス改善に貢献する
- SINIC理論に基づき、「自律社会」における個人の幸福度向上に貢献する

### 1.3 ターゲットユーザー
- 10代〜20代の若者
- 特に、SNSでの自己表現に関心のある層
- 感情の共有や共感に価値を感じる層
- メンタルヘルスに関心のある層

## 2. SINIC理論に基づいた機能

### 2.1 社会（Society）
- 共感:
  - 同じ感情を持つユーザー同士が繋がりやすい仕組みを提供
  - 感情に基づいたコミュニティを形成できる機能
  - 誹謗中傷や差別的な発言を抑制する機能
  - 健全なコミュニティ形成を支援する機能

### 2.2 情報（Information）
- 感情分析:
  - AIが投稿された感情データを分析
  - ユーザーのメンタルヘルスや人間関係改善に役立つ情報を提供
  - 個別最適化された情報提供

### 2.3 ニーズ（Needs）
- 感情表現:
  - ユーザーの多様な感情を表現できる入力方法を提供
  - テキスト、アイコン、絵文字、スライダーなど

### 2.4 科学（Science）
- AI技術:
  - 感情分析、コンテンツレコメンド、コミュニティ形成支援などにAI技術を活用

### 2.5 イノベーション（Innovation）
- 感情SNS:
  - 感情を基軸とした新しいコミュニケーションプラットフォームを創造

## 3. 機能一覧

### 3.1 感情入力
- ユーザーは、喜び、悲しみ、怒りなど、様々な感情を表現して投稿できる
- 感情の強弱や組み合わせも表現可能
- アイコン、絵文字、スライダーなど、多様な入力方法を提供
- Xのような文字入力による感情表現も可能にする

### 3.2 共感機能
- 同じ感情を共有するユーザー同士が繋がり合える
- 感情に基づいたコミュニティを形成できる
- コメントやリアクションで感情を共有できる
- YouTubeのように、他のユーザーの投稿に動画でリアクションできる機能も検討する

### 3.3 感情分析
- AIが投稿された感情データを分析し、ユーザーにフィードバックを提供する
- ストレスレベルやメンタルヘルスの状態を可視化する
- 感情の傾向や人間関係の改善に役立つ情報を提供する
- 将来的には、Instagramのように、分析結果に基づいたパーソナライズされたコンテンツをレコメンドする機能も検討する

### 3.4 匿名機能
- ユーザーは、実名ではなくニックネームで利用できる
- 匿名性を重視することで、ユーザーがより本音で感情を表現できる場を提供する

### 3.5 ストーリーズ機能
- Instagramストーリーズのように、24時間で消える投稿機能
- 動画や画像にテキストやスタンプを追加できる
- 他のユーザーのストーリーズにリアクションできる

### 3.6 ライブ配信機能
- TikTok LIVEのように、リアルタイムで動画配信できる機能
- 視聴者とリアルタイムでコミュニケーションできる
- ライブ配信中にギフトを送受信できる

### 3.7 発見タブ
- TikTokの発見タブのように、ユーザーが新しいコンテンツやクリエイターを発見できる機能
- 感情に基づいたコンテンツをレコメンドする

## 4. 非機能要件

### 4.1 UI/UX
- シンプルで直感的なインターフェース
- ユーザーがストレスなく操作できる使いやすさ

### 4.2 パフォーマンス
- 軽快な動作
- 大量のアクセスにも耐えられる安定性

### 4.3 セキュリティ
- ユーザーのプライバシー保護
- 情報漏洩対策

## 5. 技術要件

### 5.1 プラットフォーム
- iOS、Android（Flutterによるクロスプラットフォーム開発）

### 5.2 開発ツール

#### フェーズ1: 小規模開発時（初期〜MVP）
- 基本開発環境：
  - VS Code + 必要な拡張機能
  - Flutter SDK
  - Git/GitHub
  
- デザイン環境：
  - Figma（無料プラン）
  - Material Design / Cupertino

- バックエンド環境：
  ```python
  # 感情分析エンジン
  - NLTK
  - TextBlob
  - VADER
  - OpenCV
  - FER
  - librosa
  ```

- インフラ：
  - Supabase（無料プラン）
  - Vercel（Hobbyプラン）
  - Firebase（無料プラン）

#### フェーズ2: 規模拡大時（事業化・本格展開）
- 開発環境拡張：
  - GitHub Team
  - CI/CD環境の強化
  - モニタリングツールの導入

- インフラ拡張：
  - AWS/GCP必要サービス
  - スケーリング対応
  - セキュリティ強化

## 6. 開発体制
- 自社開発

## 7. スケジュール
- MVP開発：3ヶ月
- β版リリース：6ヶ月
- 正式リリース：1年

## 8. 予算

### MVPフェーズ（月額）
```
インフラ費用: ¥0
- Vercel Hobby
- Supabase Free
- Firebase Spark

開発ツール: ¥0
- VS Code
- GitHub Free
- Figma Free

感情分析: ¥0
- オープンソースライブラリ使用

合計: ¥0-5,000/月
```

## 9. その他
- 倫理的な側面も考慮し、責任ある開発を行う

## 10. 小規模開発の順序及び手順書

### 10.1 開発環境のセットアップ（所要時間: 1週間）
1. VS Code環境構築
   - 必要な拡張機能インストール
   - 設定最適化

2. Flutter環境構築
   - SDK設定
   - 開発環境テスト

3. 感情分析環境構築
   ```python
   # 必要ライブラリインストール
   pip install nltk textblob vaderSentiment
   pip install opencv-python fer
   pip install librosa numpy
   ```

4. バックエンド環境構築
   - Supabase設定
   - Vercel設定
   - Firebase設定

### 10.2 デザイン環境の準備（所要時間: 1週間）
1. Figmaプロジェクト設定
   - デザインシステム構築
   - コンポーネント管理

2. Material Design / Cupertino準拠のデザイン
   - スタイルガイド作成
   - 基本コンポーネント設計

### 10.3 バージョン管理環境の構築（所要時間: 3日）
1. GitHubリポジトリ設定
   - 初期設定
   - ブランチ戦略決定

2. GitHub Actions設定
   - CI/CD構築
   - 自動テスト設定

### 10.4 MVP開発フェーズ（所要時間: 2.5ヶ月）
1. 認証基盤の実装（2週間）
   - ユーザー認証
   - プロフィール管理

2. 感情入力機能の実装（3週間）
   - UI実装
   - 感情分析エンジン統合

3. タイムライン機能の実装（3週間）
   - フィード表示
   - インタラクション機能

4. 共感機能の実装（2週間）
   - リアクション機能
   - コミュニティ機能

### 10.5 テストとデバッグ（所要時間: 2週間）
1. 単体テスト
2. 統合テスト
3. UIテスト
4. パフォーマンステスト

### 10.6 初期リリース準備（所要時間: 1週間）
1. ストア申請準備
2. 本番環境最終確認
3. セキュリティチェック

## 11. 開発ドキュメント管理方針

### 11.1 目的
- 開発プロセスの透明性確保と知識共有の効率化

### 11.2 管理構造
```
ドキュメント/
├── technical/
│   ├── setup/
│   ├── architecture/
│   └── implementation/
├── guides/
└── troubleshooting/
```

### 11.3 ドキュメント作成プロセス
1. 技術的課題の特定
2. 解決策の文書化
3. レビューと承認

### 11.4 ドキュメントテンプレート
- 技術実装文書
- 設計文書
- ガイドライン文書

### 11.5 更新管理
- 定期的なレビュー
- バージョン管理
- 最新状態の維持

### 11.6 期待される効果
- 開発知識の効率的な蓄積と共有
- 一貫性のある実装の促進
- 将来の保守性の向上
- 新規参画者のスムーズな育成
