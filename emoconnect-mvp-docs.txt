# エモコネクト MVP開発ドキュメント

## 1. MVP要件定義書

### 1.1 目的
- 感情を共有するSNSの実現可能性検証
- 基本機能の有用性確認
- ユーザーフィードバックの収集

### 1.2 主要機能
- ユーザー認証
- 感情投稿（テキスト + 感情タグ）
- タイムライン表示
- 感情分析
- いいね/コメント

### 1.3 対象ユーザー
- 10-20代のSNSユーザー
- 感情表現に関心がある層
- メンタルヘルスに関心がある層

### 1.4 成功指標
- 月間アクティブユーザー: 100人
- 投稿数: 1ユーザーあたり週3回
- リテンション: 7日後30%

## 2. 最小限の設計ドキュメント

### 2.1 画面設計（Figma）
```
主要画面：
1. ログイン/登録画面
2. タイムライン画面
3. 投稿画面
4. プロフィール画面
```

### 2.2 データモデル
```sql
-- ユーザー
users (
    id UUID PRIMARY KEY,
    username TEXT,
    created_at TIMESTAMP
)

-- 投稿
posts (
    id UUID PRIMARY KEY,
    user_id UUID REFERENCES users(id),
    content TEXT,
    emotion_data JSONB,
    created_at TIMESTAMP
)

-- インタラクション
interactions (
    id UUID PRIMARY KEY,
    post_id UUID REFERENCES posts(id),
    user_id UUID REFERENCES users(id),
    type TEXT,
    created_at TIMESTAMP
)
```

### 2.3 API設計
```typescript
// エンドポイント
POST /api/auth/login
POST /api/auth/register
GET /api/posts
POST /api/posts
POST /api/posts/{id}/like
POST /api/posts/{id}/comment
```

## 3. 開発フロー

### 3.1 環境構築（1週間）
```bash
# 開発環境セットアップ
1. VS Code + 拡張機能インストール
2. Flutter環境構築
3. Supabase設定
4. バージョン管理設定
```

もちろんです。まずは、環境構築から始めましょう。

### 環境構築

開発環境を整えるために、以下の手順に従ってください。

1. **VS Code + 拡張機能インストール**
   - [Visual Studio Code](https://code.visualstudio.com/) をインストールします。
   - 必要な拡張機能をインストールします（例: Flutter, Python, GitHub）。

2. **Flutter環境構築**
   - [Flutter](https://flutter.dev/docs/get-started/install) をインストールします。
   - 環境変数 `PATH` に Flutter のパスを追加します。
   - `flutter doctor` コマンドを実行して、セットアップが正しく行われたか確認します。

3. **Supabase設定**
   - [Supabase](https://supabase.io/) にサインアップし、プロジェクトを作成します。
   - プロジェクトのAPIキーとURLを取得します。

4. **バージョン管理設定**
   - [Git](https://git-scm.com/) をインストールします。
   - GitHubでリポジトリを作成し、ローカルリポジトリと連携します。

以下に、環境構築の手順をまとめたスクリプトを示します。

### 3.2 フロントエンド開発（3週間）
```dart
Week 1:
- ログイン/登録画面
- タイムライン画面の基本実装

Week 2:
- 投稿機能実装
- 感情選択UI実装

Week 3:
- インタラクション機能
- プロフィール画面
```

### 3.3 バックエンド開発（2週間）
```python
Week 1:
- データベース設定
- 基本API実装

Week 2:
- 感情分析エンジン実装
- API完成
```

## 4. 使用技術

### 4.1 フロントエンド
```yaml
- Flutter 3.x
- Provider（状態管理）
- Supabase Flutter SDK
- Flutter Secure Storage
```

### 4.2 バックエンド
```yaml
- Supabase
- Python 3.x
- NLTK
- TextBlob
- Vercel（デプロイ）
```

### 4.3 開発ツール
```yaml
- VS Code
- GitHub
- Figma
- Postman
```

## 5. 感情分析実装

### 5.1 基本実装
```python
from textblob import TextBlob
from nltk.sentiment import SentimentIntensityAnalyzer

class EmotionAnalyzer:
    def __init__(self):
        self.sia = SentimentIntensityAnalyzer()
    
    def analyze_text(self, text: str) -> dict:
        # TextBlobによる基本感情分析
        blob = TextBlob(text)
        # VADERによる詳細分析
        vader_scores = self.sia.polarity_scores(text)
        
        return {
            'polarity': blob.sentiment.polarity,
            'subjectivity': blob.sentiment.subjectivity,
            'vader_scores': vader_scores
        }
    
    def get_emotion_tag(self, scores: dict) -> str:
        # 感情スコアから感情タグを決定
        if scores['polarity'] > 0.3:
            return '喜び'
        elif scores['polarity'] < -0.3:
            return '悲しみ'
        return '普通'

class EmotionAPI:
    def __init__(self):
        self.analyzer = EmotionAnalyzer()
    
    async def analyze_post(self, text: str) -> dict:
        analysis = self.analyzer.analyze_text(text)
        emotion_tag = self.analyzer.get_emotion_tag(analysis)
        
        return {
            'analysis': analysis,
            'emotion_tag': emotion_tag,
            'timestamp': datetime.now().isoformat()
        }
```

### 5.2 使用例
```python
# API利用例
async def handle_post(post_text: str):
    emotion_api = EmotionAPI()
    result = await emotion_api.analyze_post(post_text)
    
    # Supabaseに保存
    await supabase.table('posts').insert({
        'content': post_text,
        'emotion_data': result,
        'created_at': datetime.now()
    })
```

## 6. デプロイ計画

### 6.1 デプロイ環境
```yaml
フロントエンド:
- App Store（iOS）
- Play Store（Android）

バックエンド:
- Vercel
- Supabase
```

### 6.2 デプロイステップ
```bash
1. テスト環境デプロイ
2. ベータテスト実施（2週間）
3. 本番環境デプロイ
```

この最小限のドキュメントに基づいて開発を進めることで、効率的なMVP開発が可能になります。具体的な実装方法や、追加の詳細が必要な場合は、お申し付けください。

## 7. 目的
- エモコネクトMVPの目的は、感情を共有するSNSの実現可能性を検証し、基本機能の有用性を確認し、ユーザーフィードバックを収集することです。

## 8. 主要機能
- ユーザー認証、感情投稿（テキスト + 感情タグ）、タイムライン表示、感情分析、いいね/コメントなどの主要機能を含みます。

## 9. 対象ユーザー
- 10-20代のSNSユーザー、感情表現に関心がある層、メンタルヘルスに関心がある層を対象としています。

## 10. 成功指標
- 月間アクティブユーザー: 100人、投稿数: 1ユーザーあたり週3回、リテンション: 7日後30%を目標としています。

## 11. 画面設計
- ログイン/登録画面、タイムライン画面、投稿画面、プロフィール画面などの主要画面を設計します。

## 12. データモデル
- ユーザー、投稿、インタラクションのデータモデルを設計します。

## 13. API設計
- ユーザー認証、投稿、いいね、コメントなどのAPIエンドポイントを設計します。

## 14. 開発フロー
- 環境構築、フロントエンド開発、バックエンド開発、テストとデバッグ、初期リリース準備の開発フローを計画します。

## 15. 使用技術
- フロントエンドにはFlutter、バックエンドにはSupabaseとPythonを使用します。

## 16. 感情分析実装
- TextBlobとVADERを使用して感情分析を実装します。

## 17. デプロイ計画
- フロントエンドはApp StoreとPlay Storeに、バックエンドはVercelとSupabaseにデプロイします。

## 18. 開発体制
- 自社開発

## 19. スケジュール
- MVP開発：3ヶ月、β版リリース：6ヶ月、正式リリース：1年

## 20. 予算
- MVPフェーズ（月額）: インフラ費用: ¥0、開発ツール: ¥0、感情分析: ¥0、合計: ¥0-5,000/月

## 21. その他
- 倫理的な側面も考慮し、責任ある開発を行う

## 22. 小規模開発の順序及び手順書

### 22.1 開発環境のセットアップ（所要時間: 1週間）
1. VS Code環境構築
   - 必要な拡張機能インストール
   - 設定最適化

2. Flutter環境構築
   - SDK設定
   - 開発環境テスト

3. 感情分析環境構築
   ```python
   # 必要ライブラリインストール
   pip install nltk textblob vaderSentiment
   pip install opencv-python fer
   pip install librosa numpy
   ```

4. バックエンド環境構築
   - Supabase設定
   - Vercel設定
   - Firebase設定

### 22.2 デザイン環境の準備（所要時間: 1週間）
1. Figmaプロジェクト設定
   - デザインシステム構築
   - コンポーネント管理

2. Material Design / Cupertino準拠のデザイン
   - スタイルガイド作成
   - 基本コンポーネント設計

### 22.3 バージョン管理環境の構築（所要時間: 3日）
1. GitHubリポジトリ設定
   - 初期設定
   - ブランチ戦略決定

2. GitHub Actions設定
   - CI/CD構築
   - 自動テスト設定

### 22.4 MVP開発フェーズ（所要時間: 2.5ヶ月）
1. 認証基盤の実装（2週間）
   - ユーザー認証
   - プロフィール管理

2. 感情入力機能の実装（3週間）
   - UI実装
   - 感情分析エンジン統合

3. タイムライン機能の実装（3週間）
   - フィード表示
   - インタラクション機能

4. 共感機能の実装（2週間）
   - リアクション機能
   - コミュニティ機能

### 22.5 テストとデバッグ（所要時間: 2週間）
1. 単体テスト
2. 統合テスト
3. UIテスト
4. パフォーマンステスト

### 22.6 初期リリース準備（所要時間: 1週間）
1. ストア申請準備
2. 本番環境最終確認
3. セキュリティチェック

## 23. 開発ドキュメント管理方針

### 23.1 目的
- 開発プロセスの透明性確保と知識共有の効率化

### 23.2 管理構造
```
ドキュメント/
├── technical/
│   ├── setup/
│   ├── architecture/
│   └── implementation/
├── guides/
└── troubleshooting/
```

### 23.3 ドキュメント作成プロセス
1. 技術的課題の特定
2. 解決策の文書化
3. レビューと承認

### 23.4 ドキュメントテンプレート
- 技術実装文書
- 設計文書
- ガイドライン文書

### 23.5 更新管理
- 定期的なレビュー
- バージョン管理
- 最新状態の維持

### 23.6 期待される効果
- 開発知識の効率的な蓄積と共有
- 一貫性のある実装の促進
- 将来の保守性の向上
- 新規参画者のスムーズな育成
